const vmt_LS
	:LS.Start
	:LS.Print
	:LS.Search
	:LS.Init

func Main()
	t.0 = HeapAllocZ(12)
	[t.0] = :vmt_LS
	t.1 = t.0
	t.2 = 10
	t.3 = t.2
	if t.1 goto :null1
		Error("null pointer")
	null1:
	t.4 = [t.1]
	t.4 = [t.4+0]
	t.5 = call t.4(t.1 t.3)
	t.6 = t.5
	PrintIntS(t.6)
	ret

func LS.Start(this sz)
	t.0 = this
	t.1 = sz
	t.2 = t.1
	if t.0 goto :null2
		Error("null pointer")
	null2:
	t.3 = [t.0]
	t.3 = [t.3+12]
	t.4 = call t.3(t.0 t.2)
	t.5 = t.4
	aux01 = t.5
	t.6 = this
	if t.6 goto :null3
		Error("null pointer")
	null3:
	t.7 = [t.6]
	t.7 = [t.7+4]
	t.8 = call t.7(t.6)
	t.9 = t.8
	aux02 = t.9
	t.10 = 9999
	t.11 = t.10
	PrintIntS(t.11)
	t.12 = this
	t.13 = 8
	t.14 = t.13
	if t.12 goto :null4
		Error("null pointer")
	null4:
	t.15 = [t.12]
	t.15 = [t.15+8]
	t.16 = call t.15(t.12 t.14)
	t.17 = t.16
	PrintIntS(t.17)
	t.18 = this
	t.19 = 12
	t.20 = t.19
	if t.18 goto :null5
		Error("null pointer")
	null5:
	t.21 = [t.18]
	t.21 = [t.21+8]
	t.22 = call t.21(t.18 t.20)
	t.23 = t.22
	PrintIntS(t.23)
	t.24 = this
	t.25 = 17
	t.26 = t.25
	if t.24 goto :null6
		Error("null pointer")
	null6:
	t.27 = [t.24]
	t.27 = [t.27+8]
	t.28 = call t.27(t.24 t.26)
	t.29 = t.28
	PrintIntS(t.29)
	t.30 = this
	t.31 = 50
	t.32 = t.31
	if t.30 goto :null7
		Error("null pointer")
	null7:
	t.33 = [t.30]
	t.33 = [t.33+8]
	t.34 = call t.33(t.30 t.32)
	t.35 = t.34
	PrintIntS(t.35)
	t.0 = 55
	t.1 = t.0
	ret t.1

func LS.Print(this)
	t.2 = 1
	t.3 = t.2
	j = t.3
	while1_top:
	t.6 = j
	t.7 = [this+8]
	t.8 = t.7
	t.9 = t.8
	t.4 = t.6
	t.5 = t.9
	t.10 = LtS(t.4 t.5)
	if0 t.10 goto :while1_end
		t.11 = [this+4]
		t.12 = j
		t.13 = t.11
		if t.13 goto :null8
			Error("null pointer")
		null8:
		t.14 = [t.13]
		t.14 = Lt(t.12 t.14)
		if t.14 goto :bounds1
			Error("array index out of bounds")
		bounds1:
		t.14 = MulS(t.12 4)
		t.14 = Add(t.14 t.13)
		t.15 = [t.14+4]
		t.16 = t.15
		PrintIntS(t.16)
		t.17 = j
		t.18 = 1
		t.19 = Add(t.17 t.18)
		t.20 = t.19
		j = t.20
		goto :while1_top
	while1_end:
	t.0 = 0
	t.1 = t.0
	ret t.1

func LS.Search(this num)
	t.2 = 1
	t.3 = t.2
	j = t.3
	t.4 = 0
	t.5 = t.4
	ls01 = t.5
	t.6 = 0
	t.7 = t.6
	ifound = t.7
	while2_top:
	t.10 = j
	t.11 = [this+8]
	t.12 = t.11
	t.13 = t.12
	t.8 = t.10
	t.9 = t.13
	t.14 = LtS(t.8 t.9)
	if0 t.14 goto :while2_end
		t.15 = [this+4]
		t.16 = j
		t.17 = t.15
		if t.17 goto :null9
			Error("null pointer")
		null9:
		t.18 = [t.17]
		t.18 = Lt(t.16 t.18)
		if t.18 goto :bounds2
			Error("array index out of bounds")
		bounds2:
		t.18 = MulS(t.16 4)
		t.18 = Add(t.18 t.17)
		t.19 = [t.18+4]
		t.20 = t.19
		aux01 = t.20
		t.21 = num
		t.22 = 1
		t.23 = Add(t.21 t.22)
		t.24 = t.23
		aux02 = t.24
		t.27 = aux01
		t.28 = num
		t.25 = t.27
		t.26 = t.28
		t.29 = LtS(t.25 t.26)
		t.30 = t.29
		if0 t.30 goto :if1_else
			t.31 = 0
			t.32 = t.31
			nt = t.32
			goto :if1_end
		if1_else:
			t.36 = aux01
			t.37 = aux02
			t.34 = t.36
			t.35 = t.37
			t.38 = LtS(t.34 t.35)
			t.39 = t.38
			t.40 = t.39
			t.33 = t.40
			t.41 = Sub(1 t.33)
			t.42 = t.41
			t.43 = t.42
			t.44 = t.43
			if0 t.44 goto :if2_else
				t.45 = 0
				t.46 = t.45
				nt = t.46
				goto :if2_end
			if2_else:
				t.47 = 1
				t.48 = t.47
				ls01 = t.48
				t.49 = 1
				t.50 = t.49
				ifound = t.50
				t.51 = [this+8]
				t.52 = t.51
				j = t.52
			if2_end:
		if1_end:
		t.53 = j
		t.54 = 1
		t.55 = Add(t.53 t.54)
		t.56 = t.55
		j = t.56
		goto :while2_top
	while2_end:
	t.0 = ifound
	t.1 = t.0
	ret t.1

func LS.Init(this sz)
	t.2 = sz
	t.3 = t.2
	[this+8] = t.3
	t.4 = sz
	t.5 = t.4
	t.6 = call :AllocArray(t.5)
	t.7 = t.6
	t.8 = t.7
	[this+4] = t.8
	t.9 = 1
	t.10 = t.9
	j = t.10
	t.11 = [this+8]
	t.12 = 1
	t.13 = Add(t.11 t.12)
	t.14 = t.13
	k = t.14
	while3_top:
	t.17 = j
	t.18 = [this+8]
	t.19 = t.18
	t.20 = t.19
	t.15 = t.17
	t.16 = t.20
	t.21 = LtS(t.15 t.16)
	if0 t.21 goto :while3_end
		t.22 = 2
		t.23 = j
		t.24 = MulS(t.22 t.23)
		t.25 = t.24
		aux01 = t.25
		t.26 = k
		t.27 = 3
		t.28 = Sub(t.26 t.27)
		t.29 = t.28
		aux02 = t.29
		t.30 = j
		t.31 = t.30
		t.32 = aux01
		t.33 = aux02
		t.34 = Add(t.32 t.33)
		t.35 = t.34
		t.36 = number
		if t.36 goto :null10
			Error("null pointer")
		null10:
		t.37 = [t.36]
		t.37 = Lt(t.31 t.37)
		if t.37 goto :bounds3
			Error("array index out of bounds")
		bounds3:
		t.37 = MulS(t.31 4)
		t.37 = Add(t.37 t.36)
		[t.37+4] = t.35
		t.38 = j
		t.39 = 1
		t.40 = Add(t.38 t.39)
		t.41 = t.40
		j = t.41
		t.42 = k
		t.43 = 1
		t.44 = Sub(t.42 t.43)
		t.45 = t.44
		k = t.45
		goto :while3_top
	while3_end:
	t.0 = 0
	t.1 = t.0
	ret t.1

func AllocArray(size)
	bytes = MulS(size 4)
	bytes = Add(bytes 4)
	v = HeapAllocZ(bytes)
	[v] = size
	ret v
