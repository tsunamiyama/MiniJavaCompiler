const vmt_BBS
	:BBS.Start
	:BBS.Sort
	:BBS.Print
	:BBS.Init

func Main()
	t.0 = HeapAllocZ(12)
	[t.0] = :vmt_BBS
	t.1 = t.0
	t.2 = 10
	t.3 = t.2
	if t.1 goto :null1
		Error("null pointer")
	null1:
	t.4 = [t.1]
	t.4 = [t.4+0]
	t.5 = call t.4(t.1 t.3)
	t.6 = t.5
	PrintIntS(t.6)
	ret

func BBS.Start(this sz)
	t.0 = this
	t.1 = sz
	t.2 = t.1
	if t.0 goto :null2
		Error("null pointer")
	null2:
	t.3 = [t.0]
	t.3 = [t.3+12]
	t.4 = call t.3(t.0 t.2)
	t.5 = t.4
	aux01 = t.5
	t.6 = this
	if t.6 goto :null3
		Error("null pointer")
	null3:
	t.7 = [t.6]
	t.7 = [t.7+8]
	t.8 = call t.7(t.6)
	t.9 = t.8
	aux01 = t.9
	t.10 = 99999
	t.11 = t.10
	PrintIntS(t.11)
	t.12 = this
	if t.12 goto :null4
		Error("null pointer")
	null4:
	t.13 = [t.12]
	t.13 = [t.13+4]
	t.14 = call t.13(t.12)
	t.15 = t.14
	aux01 = t.15
	t.16 = this
	if t.16 goto :null5
		Error("null pointer")
	null5:
	t.17 = [t.16]
	t.17 = [t.17+8]
	t.18 = call t.17(t.16)
	t.19 = t.18
	aux01 = t.19
	t.0 = 0
	t.1 = t.0
	ret t.1

func BBS.Sort(this)
	t.2 = [this+8]
	t.3 = 1
	t.4 = Sub(t.2 t.3)
	t.5 = t.4
	i = t.5
	t.6 = 0
	t.7 = 1
	t.8 = Sub(t.6 t.7)
	t.9 = t.8
	aux02 = t.9
	while1_top:
	t.12 = aux02
	t.13 = i
	t.10 = t.12
	t.11 = t.13
	t.14 = LtS(t.10 t.11)
	if0 t.14 goto :while1_end
		t.15 = 1
		t.16 = t.15
		j = t.16
		while2_top:
		t.19 = j
		t.20 = i
		t.21 = 1
		t.22 = Add(t.20 t.21)
		t.23 = t.22
		t.24 = t.23
		t.17 = t.19
		t.18 = t.24
		t.25 = LtS(t.17 t.18)
		if0 t.25 goto :while2_end
			t.26 = j
			t.27 = 1
			t.28 = Sub(t.26 t.27)
			t.29 = t.28
			aux07 = t.29
			t.30 = [this+4]
			t.31 = aux07
			t.32 = t.30
			if t.32 goto :null6
				Error("null pointer")
			null6:
			t.33 = [t.32]
			t.33 = Lt(t.31 t.33)
			if t.33 goto :bounds1
				Error("array index out of bounds")
			bounds1:
			t.33 = MulS(t.31 4)
			t.33 = Add(t.33 t.32)
			t.34 = [t.33+4]
			t.35 = t.34
			aux04 = t.35
			t.36 = [this+4]
			t.37 = j
			t.38 = t.36
			if t.38 goto :null7
				Error("null pointer")
			null7:
			t.39 = [t.38]
			t.39 = Lt(t.37 t.39)
			if t.39 goto :bounds2
				Error("array index out of bounds")
			bounds2:
			t.39 = MulS(t.37 4)
			t.39 = Add(t.39 t.38)
			t.40 = [t.39+4]
			t.41 = t.40
			aux05 = t.41
			t.44 = aux05
			t.45 = aux04
			t.42 = t.44
			t.43 = t.45
			t.46 = LtS(t.42 t.43)
			t.47 = t.46
			if0 t.47 goto :if1_else
				t.48 = j
				t.49 = 1
				t.50 = Sub(t.48 t.49)
				t.51 = t.50
				aux06 = t.51
				t.52 = [this+4]
				t.53 = aux06
				t.54 = t.52
				if t.54 goto :null8
					Error("null pointer")
				null8:
				t.55 = [t.54]
				t.55 = Lt(t.53 t.55)
				if t.55 goto :bounds3
					Error("array index out of bounds")
				bounds3:
				t.55 = MulS(t.53 4)
				t.55 = Add(t.55 t.54)
				t.56 = [t.55+4]
				t.57 = t.56
				t = t.57
				t.58 = aux06
				t.59 = t.58
				t.60 = [this+4]
				t.61 = j
				t.62 = t.60
				if t.62 goto :null9
					Error("null pointer")
				null9:
				t.63 = [t.62]
				t.63 = Lt(t.61 t.63)
				if t.63 goto :bounds4
					Error("array index out of bounds")
				bounds4:
				t.63 = MulS(t.61 4)
				t.63 = Add(t.63 t.62)
				t.64 = [t.63+4]
				t.65 = t.64
				t.66 = number
				if t.66 goto :null10
					Error("null pointer")
				null10:
				t.67 = [t.66]
				t.67 = Lt(t.59 t.67)
				if t.67 goto :bounds5
					Error("array index out of bounds")
				bounds5:
				t.67 = MulS(t.59 4)
				t.67 = Add(t.67 t.66)
				[t.67+4] = t.65
				t.68 = j
				t.69 = t.68
				t.70 = t
				t.71 = t.70
				t.72 = number
				if t.72 goto :null11
					Error("null pointer")
				null11:
				t.73 = [t.72]
				t.73 = Lt(t.69 t.73)
				if t.73 goto :bounds6
					Error("array index out of bounds")
				bounds6:
				t.73 = MulS(t.69 4)
				t.73 = Add(t.73 t.72)
				[t.73+4] = t.71
				goto :if1_end
			if1_else:
				t.74 = 0
				t.75 = t.74
				nt = t.75
			if1_end:
			t.76 = j
			t.77 = 1
			t.78 = Add(t.76 t.77)
			t.79 = t.78
			j = t.79
			goto :while2_top
		while2_end:
		t.80 = i
		t.81 = 1
		t.82 = Sub(t.80 t.81)
		t.83 = t.82
		i = t.83
		goto :while1_top
	while1_end:
	t.0 = 0
	t.1 = t.0
	ret t.1

func BBS.Print(this)
	t.2 = 0
	t.3 = t.2
	j = t.3
	while3_top:
	t.6 = j
	t.7 = [this+8]
	t.8 = t.7
	t.9 = t.8
	t.4 = t.6
	t.5 = t.9
	t.10 = LtS(t.4 t.5)
	if0 t.10 goto :while3_end
		t.11 = [this+4]
		t.12 = j
		t.13 = t.11
		if t.13 goto :null12
			Error("null pointer")
		null12:
		t.14 = [t.13]
		t.14 = Lt(t.12 t.14)
		if t.14 goto :bounds7
			Error("array index out of bounds")
		bounds7:
		t.14 = MulS(t.12 4)
		t.14 = Add(t.14 t.13)
		t.15 = [t.14+4]
		t.16 = t.15
		PrintIntS(t.16)
		t.17 = j
		t.18 = 1
		t.19 = Add(t.17 t.18)
		t.20 = t.19
		j = t.20
		goto :while3_top
	while3_end:
	t.0 = 0
	t.1 = t.0
	ret t.1

func BBS.Init(this sz)
	t.2 = sz
	t.3 = t.2
	[this+8] = t.3
	t.4 = sz
	t.5 = t.4
	t.6 = call :AllocArray(t.5)
	t.7 = t.6
	t.8 = t.7
	[this+4] = t.8
	t.9 = 0
	t.10 = t.9
	t.11 = 20
	t.12 = t.11
	t.13 = number
	if t.13 goto :null13
		Error("null pointer")
	null13:
	t.14 = [t.13]
	t.14 = Lt(t.10 t.14)
	if t.14 goto :bounds8
		Error("array index out of bounds")
	bounds8:
	t.14 = MulS(t.10 4)
	t.14 = Add(t.14 t.13)
	[t.14+4] = t.12
	t.15 = 1
	t.16 = t.15
	t.17 = 7
	t.18 = t.17
	t.19 = number
	if t.19 goto :null14
		Error("null pointer")
	null14:
	t.20 = [t.19]
	t.20 = Lt(t.16 t.20)
	if t.20 goto :bounds9
		Error("array index out of bounds")
	bounds9:
	t.20 = MulS(t.16 4)
	t.20 = Add(t.20 t.19)
	[t.20+4] = t.18
	t.21 = 2
	t.22 = t.21
	t.23 = 12
	t.24 = t.23
	t.25 = number
	if t.25 goto :null15
		Error("null pointer")
	null15:
	t.26 = [t.25]
	t.26 = Lt(t.22 t.26)
	if t.26 goto :bounds10
		Error("array index out of bounds")
	bounds10:
	t.26 = MulS(t.22 4)
	t.26 = Add(t.26 t.25)
	[t.26+4] = t.24
	t.27 = 3
	t.28 = t.27
	t.29 = 18
	t.30 = t.29
	t.31 = number
	if t.31 goto :null16
		Error("null pointer")
	null16:
	t.32 = [t.31]
	t.32 = Lt(t.28 t.32)
	if t.32 goto :bounds11
		Error("array index out of bounds")
	bounds11:
	t.32 = MulS(t.28 4)
	t.32 = Add(t.32 t.31)
	[t.32+4] = t.30
	t.33 = 4
	t.34 = t.33
	t.35 = 2
	t.36 = t.35
	t.37 = number
	if t.37 goto :null17
		Error("null pointer")
	null17:
	t.38 = [t.37]
	t.38 = Lt(t.34 t.38)
	if t.38 goto :bounds12
		Error("array index out of bounds")
	bounds12:
	t.38 = MulS(t.34 4)
	t.38 = Add(t.38 t.37)
	[t.38+4] = t.36
	t.39 = 5
	t.40 = t.39
	t.41 = 11
	t.42 = t.41
	t.43 = number
	if t.43 goto :null18
		Error("null pointer")
	null18:
	t.44 = [t.43]
	t.44 = Lt(t.40 t.44)
	if t.44 goto :bounds13
		Error("array index out of bounds")
	bounds13:
	t.44 = MulS(t.40 4)
	t.44 = Add(t.44 t.43)
	[t.44+4] = t.42
	t.45 = 6
	t.46 = t.45
	t.47 = 6
	t.48 = t.47
	t.49 = number
	if t.49 goto :null19
		Error("null pointer")
	null19:
	t.50 = [t.49]
	t.50 = Lt(t.46 t.50)
	if t.50 goto :bounds14
		Error("array index out of bounds")
	bounds14:
	t.50 = MulS(t.46 4)
	t.50 = Add(t.50 t.49)
	[t.50+4] = t.48
	t.51 = 7
	t.52 = t.51
	t.53 = 9
	t.54 = t.53
	t.55 = number
	if t.55 goto :null20
		Error("null pointer")
	null20:
	t.56 = [t.55]
	t.56 = Lt(t.52 t.56)
	if t.56 goto :bounds15
		Error("array index out of bounds")
	bounds15:
	t.56 = MulS(t.52 4)
	t.56 = Add(t.56 t.55)
	[t.56+4] = t.54
	t.57 = 8
	t.58 = t.57
	t.59 = 19
	t.60 = t.59
	t.61 = number
	if t.61 goto :null21
		Error("null pointer")
	null21:
	t.62 = [t.61]
	t.62 = Lt(t.58 t.62)
	if t.62 goto :bounds16
		Error("array index out of bounds")
	bounds16:
	t.62 = MulS(t.58 4)
	t.62 = Add(t.62 t.61)
	[t.62+4] = t.60
	t.63 = 9
	t.64 = t.63
	t.65 = 5
	t.66 = t.65
	t.67 = number
	if t.67 goto :null22
		Error("null pointer")
	null22:
	t.68 = [t.67]
	t.68 = Lt(t.64 t.68)
	if t.68 goto :bounds17
		Error("array index out of bounds")
	bounds17:
	t.68 = MulS(t.64 4)
	t.68 = Add(t.68 t.67)
	[t.68+4] = t.66
	t.0 = 0
	t.1 = t.0
	ret t.1

func AllocArray(size)
	bytes = MulS(size 4)
	bytes = Add(bytes 4)
	v = HeapAllocZ(bytes)
	[v] = size
	ret v
