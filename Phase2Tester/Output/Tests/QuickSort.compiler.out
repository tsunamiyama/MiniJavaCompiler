const vmt_QS
	:QS.Start
	:QS.Sort
	:QS.Print
	:QS.Init

func Main()
	t.0 = HeapAllocZ(12)
	[t.0] = :vmt_QS
	t.1 = t.0
	t.2 = 10
	t.3 = t.2
	if t.1 goto :null1
		Error("null pointer")
	null1:
	t.4 = [t.1]
	t.4 = [t.4+0]
	t.5 = call t.4(t.1 t.3)
	t.6 = t.5
	PrintIntS(t.6)
	ret

func QS.Start(this sz)
	t.0 = this
	t.1 = sz
	t.2 = t.1
	if t.0 goto :null2
		Error("null pointer")
	null2:
	t.3 = [t.0]
	t.3 = [t.3+12]
	t.4 = call t.3(t.0 t.2)
	t.5 = t.4
	aux01 = t.5
	t.6 = this
	if t.6 goto :null3
		Error("null pointer")
	null3:
	t.7 = [t.6]
	t.7 = [t.7+8]
	t.8 = call t.7(t.6)
	t.9 = t.8
	aux01 = t.9
	t.10 = 9999
	t.11 = t.10
	PrintIntS(t.11)
	t.12 = [this+8]
	t.13 = 1
	t.14 = Sub(t.12 t.13)
	t.15 = t.14
	aux01 = t.15
	t.16 = this
	t.17 = 0
	t.18 = t.17
	t.19 = aux01
	t.20 = t.19
	if t.16 goto :null4
		Error("null pointer")
	null4:
	t.21 = [t.16]
	t.21 = [t.21+4]
	t.22 = call t.21(t.16 t.18 t.20)
	t.23 = t.22
	aux01 = t.23
	t.24 = this
	if t.24 goto :null5
		Error("null pointer")
	null5:
	t.25 = [t.24]
	t.25 = [t.25+8]
	t.26 = call t.25(t.24)
	t.27 = t.26
	aux01 = t.27
	t.0 = 0
	t.1 = t.0
	ret t.1

func QS.Sort(this left right)
	t.2 = 0
	t.3 = t.2
	t = t.3
	t.6 = left
	t.7 = right
	t.4 = t.6
	t.5 = t.7
	t.8 = LtS(t.4 t.5)
	t.9 = t.8
	if0 t.9 goto :if1_else
		t.10 = [this+4]
		t.11 = right
		t.12 = t.10
		if t.12 goto :null6
			Error("null pointer")
		null6:
		t.13 = [t.12]
		t.13 = Lt(t.11 t.13)
		if t.13 goto :bounds1
			Error("array index out of bounds")
		bounds1:
		t.13 = MulS(t.11 4)
		t.13 = Add(t.13 t.12)
		t.14 = [t.13+4]
		t.15 = t.14
		v = t.15
		t.16 = left
		t.17 = 1
		t.18 = Sub(t.16 t.17)
		t.19 = t.18
		i = t.19
		t.20 = right
		t.21 = t.20
		j = t.21
		t.22 = 1
		t.23 = t.22
		cont01 = t.23
		while1_top:
		t.24 = cont01
		t.25 = t.24
		if0 t.25 goto :while1_end
			t.26 = 1
			t.27 = t.26
			cont02 = t.27
			while2_top:
			t.28 = cont02
			t.29 = t.28
			if0 t.29 goto :while2_end
				t.30 = i
				t.31 = 1
				t.32 = Add(t.30 t.31)
				t.33 = t.32
				i = t.33
				t.34 = [this+4]
				t.35 = i
				t.36 = t.34
				if t.36 goto :null7
					Error("null pointer")
				null7:
				t.37 = [t.36]
				t.37 = Lt(t.35 t.37)
				if t.37 goto :bounds2
					Error("array index out of bounds")
				bounds2:
				t.37 = MulS(t.35 4)
				t.37 = Add(t.37 t.36)
				t.38 = [t.37+4]
				t.39 = t.38
				aux03 = t.39
				t.43 = aux03
				t.44 = v
				t.41 = t.43
				t.42 = t.44
				t.45 = LtS(t.41 t.42)
				t.46 = t.45
				t.47 = t.46
				t.40 = t.47
				t.48 = Sub(1 t.40)
				t.49 = t.48
				t.50 = t.49
				t.51 = t.50
				if0 t.51 goto :if2_else
					t.52 = 0
					t.53 = t.52
					cont02 = t.53
					goto :if2_end
				if2_else:
					t.54 = 1
					t.55 = t.54
					cont02 = t.55
				if2_end:
				goto :while2_top
			while2_end:
			t.56 = 1
			t.57 = t.56
			cont02 = t.57
			while3_top:
			t.58 = cont02
			t.59 = t.58
			if0 t.59 goto :while3_end
				t.60 = j
				t.61 = 1
				t.62 = Sub(t.60 t.61)
				t.63 = t.62
				j = t.63
				t.64 = [this+4]
				t.65 = j
				t.66 = t.64
				if t.66 goto :null8
					Error("null pointer")
				null8:
				t.67 = [t.66]
				t.67 = Lt(t.65 t.67)
				if t.67 goto :bounds3
					Error("array index out of bounds")
				bounds3:
				t.67 = MulS(t.65 4)
				t.67 = Add(t.67 t.66)
				t.68 = [t.67+4]
				t.69 = t.68
				aux03 = t.69
				t.73 = v
				t.74 = aux03
				t.71 = t.73
				t.72 = t.74
				t.75 = LtS(t.71 t.72)
				t.76 = t.75
				t.77 = t.76
				t.70 = t.77
				t.78 = Sub(1 t.70)
				t.79 = t.78
				t.80 = t.79
				t.81 = t.80
				if0 t.81 goto :if3_else
					t.82 = 0
					t.83 = t.82
					cont02 = t.83
					goto :if3_end
				if3_else:
					t.84 = 1
					t.85 = t.84
					cont02 = t.85
				if3_end:
				goto :while3_top
			while3_end:
			t.86 = [this+4]
			t.87 = i
			t.88 = t.86
			if t.88 goto :null9
				Error("null pointer")
			null9:
			t.89 = [t.88]
			t.89 = Lt(t.87 t.89)
			if t.89 goto :bounds4
				Error("array index out of bounds")
			bounds4:
			t.89 = MulS(t.87 4)
			t.89 = Add(t.89 t.88)
			t.90 = [t.89+4]
			t.91 = t.90
			t = t.91
			t.92 = i
			t.93 = t.92
			t.94 = [this+4]
			t.95 = j
			t.96 = t.94
			if t.96 goto :null10
				Error("null pointer")
			null10:
			t.97 = [t.96]
			t.97 = Lt(t.95 t.97)
			if t.97 goto :bounds5
				Error("array index out of bounds")
			bounds5:
			t.97 = MulS(t.95 4)
			t.97 = Add(t.97 t.96)
			t.98 = [t.97+4]
			t.99 = t.98
			t.100 = number
			if t.100 goto :null11
				Error("null pointer")
			null11:
			t.101 = [t.100]
			t.101 = Lt(t.93 t.101)
			if t.101 goto :bounds6
				Error("array index out of bounds")
			bounds6:
			t.101 = MulS(t.93 4)
			t.101 = Add(t.101 t.100)
			[t.101+4] = t.99
			t.102 = j
			t.103 = t.102
			t.104 = t
			t.105 = t.104
			t.106 = number
			if t.106 goto :null12
				Error("null pointer")
			null12:
			t.107 = [t.106]
			t.107 = Lt(t.103 t.107)
			if t.107 goto :bounds7
				Error("array index out of bounds")
			bounds7:
			t.107 = MulS(t.103 4)
			t.107 = Add(t.107 t.106)
			[t.107+4] = t.105
			t.110 = j
			t.111 = i
			t.112 = 1
			t.113 = Add(t.111 t.112)
			t.114 = t.113
			t.115 = t.114
			t.108 = t.110
			t.109 = t.115
			t.116 = LtS(t.108 t.109)
			t.117 = t.116
			if0 t.117 goto :if4_else
				t.118 = 0
				t.119 = t.118
				cont01 = t.119
				goto :if4_end
			if4_else:
				t.120 = 1
				t.121 = t.120
				cont01 = t.121
			if4_end:
			goto :while1_top
		while1_end:
		t.122 = j
		t.123 = t.122
		t.124 = [this+4]
		t.125 = i
		t.126 = t.124
		if t.126 goto :null13
			Error("null pointer")
		null13:
		t.127 = [t.126]
		t.127 = Lt(t.125 t.127)
		if t.127 goto :bounds8
			Error("array index out of bounds")
		bounds8:
		t.127 = MulS(t.125 4)
		t.127 = Add(t.127 t.126)
		t.128 = [t.127+4]
		t.129 = t.128
		t.130 = number
		if t.130 goto :null14
			Error("null pointer")
		null14:
		t.131 = [t.130]
		t.131 = Lt(t.123 t.131)
		if t.131 goto :bounds9
			Error("array index out of bounds")
		bounds9:
		t.131 = MulS(t.123 4)
		t.131 = Add(t.131 t.130)
		[t.131+4] = t.129
		t.132 = i
		t.133 = t.132
		t.134 = [this+4]
		t.135 = right
		t.136 = t.134
		if t.136 goto :null15
			Error("null pointer")
		null15:
		t.137 = [t.136]
		t.137 = Lt(t.135 t.137)
		if t.137 goto :bounds10
			Error("array index out of bounds")
		bounds10:
		t.137 = MulS(t.135 4)
		t.137 = Add(t.137 t.136)
		t.138 = [t.137+4]
		t.139 = t.138
		t.140 = number
		if t.140 goto :null16
			Error("null pointer")
		null16:
		t.141 = [t.140]
		t.141 = Lt(t.133 t.141)
		if t.141 goto :bounds11
			Error("array index out of bounds")
		bounds11:
		t.141 = MulS(t.133 4)
		t.141 = Add(t.141 t.140)
		[t.141+4] = t.139
		t.142 = right
		t.143 = t.142
		t.144 = t
		t.145 = t.144
		t.146 = number
		if t.146 goto :null17
			Error("null pointer")
		null17:
		t.147 = [t.146]
		t.147 = Lt(t.143 t.147)
		if t.147 goto :bounds12
			Error("array index out of bounds")
		bounds12:
		t.147 = MulS(t.143 4)
		t.147 = Add(t.147 t.146)
		[t.147+4] = t.145
		t.148 = this
		t.149 = left
		t.150 = t.149
		t.151 = i
		t.152 = 1
		t.153 = Sub(t.151 t.152)
		t.154 = t.153
		if t.148 goto :null18
			Error("null pointer")
		null18:
		t.155 = [t.148]
		t.155 = [t.155+4]
		t.156 = call t.155(t.148 t.150 t.154)
		t.157 = t.156
		nt = t.157
		t.158 = this
		t.159 = i
		t.160 = 1
		t.161 = Add(t.159 t.160)
		t.162 = t.161
		t.163 = right
		t.164 = t.163
		if t.158 goto :null19
			Error("null pointer")
		null19:
		t.165 = [t.158]
		t.165 = [t.165+4]
		t.166 = call t.165(t.158 t.162 t.164)
		t.167 = t.166
		nt = t.167
		goto :if1_end
	if1_else:
		t.168 = 0
		t.169 = t.168
		nt = t.169
	if1_end:
	t.0 = 0
	t.1 = t.0
	ret t.1

func QS.Print(this)
	t.2 = 0
	t.3 = t.2
	j = t.3
	while4_top:
	t.6 = j
	t.7 = [this+8]
	t.8 = t.7
	t.9 = t.8
	t.4 = t.6
	t.5 = t.9
	t.10 = LtS(t.4 t.5)
	if0 t.10 goto :while4_end
		t.11 = [this+4]
		t.12 = j
		t.13 = t.11
		if t.13 goto :null20
			Error("null pointer")
		null20:
		t.14 = [t.13]
		t.14 = Lt(t.12 t.14)
		if t.14 goto :bounds13
			Error("array index out of bounds")
		bounds13:
		t.14 = MulS(t.12 4)
		t.14 = Add(t.14 t.13)
		t.15 = [t.14+4]
		t.16 = t.15
		PrintIntS(t.16)
		t.17 = j
		t.18 = 1
		t.19 = Add(t.17 t.18)
		t.20 = t.19
		j = t.20
		goto :while4_top
	while4_end:
	t.0 = 0
	t.1 = t.0
	ret t.1

func QS.Init(this sz)
	t.2 = sz
	t.3 = t.2
	[this+8] = t.3
	t.4 = sz
	t.5 = t.4
	t.6 = call :AllocArray(t.5)
	t.7 = t.6
	t.8 = t.7
	[this+4] = t.8
	t.9 = 0
	t.10 = t.9
	t.11 = 20
	t.12 = t.11
	t.13 = number
	if t.13 goto :null21
		Error("null pointer")
	null21:
	t.14 = [t.13]
	t.14 = Lt(t.10 t.14)
	if t.14 goto :bounds14
		Error("array index out of bounds")
	bounds14:
	t.14 = MulS(t.10 4)
	t.14 = Add(t.14 t.13)
	[t.14+4] = t.12
	t.15 = 1
	t.16 = t.15
	t.17 = 7
	t.18 = t.17
	t.19 = number
	if t.19 goto :null22
		Error("null pointer")
	null22:
	t.20 = [t.19]
	t.20 = Lt(t.16 t.20)
	if t.20 goto :bounds15
		Error("array index out of bounds")
	bounds15:
	t.20 = MulS(t.16 4)
	t.20 = Add(t.20 t.19)
	[t.20+4] = t.18
	t.21 = 2
	t.22 = t.21
	t.23 = 12
	t.24 = t.23
	t.25 = number
	if t.25 goto :null23
		Error("null pointer")
	null23:
	t.26 = [t.25]
	t.26 = Lt(t.22 t.26)
	if t.26 goto :bounds16
		Error("array index out of bounds")
	bounds16:
	t.26 = MulS(t.22 4)
	t.26 = Add(t.26 t.25)
	[t.26+4] = t.24
	t.27 = 3
	t.28 = t.27
	t.29 = 18
	t.30 = t.29
	t.31 = number
	if t.31 goto :null24
		Error("null pointer")
	null24:
	t.32 = [t.31]
	t.32 = Lt(t.28 t.32)
	if t.32 goto :bounds17
		Error("array index out of bounds")
	bounds17:
	t.32 = MulS(t.28 4)
	t.32 = Add(t.32 t.31)
	[t.32+4] = t.30
	t.33 = 4
	t.34 = t.33
	t.35 = 2
	t.36 = t.35
	t.37 = number
	if t.37 goto :null25
		Error("null pointer")
	null25:
	t.38 = [t.37]
	t.38 = Lt(t.34 t.38)
	if t.38 goto :bounds18
		Error("array index out of bounds")
	bounds18:
	t.38 = MulS(t.34 4)
	t.38 = Add(t.38 t.37)
	[t.38+4] = t.36
	t.39 = 5
	t.40 = t.39
	t.41 = 11
	t.42 = t.41
	t.43 = number
	if t.43 goto :null26
		Error("null pointer")
	null26:
	t.44 = [t.43]
	t.44 = Lt(t.40 t.44)
	if t.44 goto :bounds19
		Error("array index out of bounds")
	bounds19:
	t.44 = MulS(t.40 4)
	t.44 = Add(t.44 t.43)
	[t.44+4] = t.42
	t.45 = 6
	t.46 = t.45
	t.47 = 6
	t.48 = t.47
	t.49 = number
	if t.49 goto :null27
		Error("null pointer")
	null27:
	t.50 = [t.49]
	t.50 = Lt(t.46 t.50)
	if t.50 goto :bounds20
		Error("array index out of bounds")
	bounds20:
	t.50 = MulS(t.46 4)
	t.50 = Add(t.50 t.49)
	[t.50+4] = t.48
	t.51 = 7
	t.52 = t.51
	t.53 = 9
	t.54 = t.53
	t.55 = number
	if t.55 goto :null28
		Error("null pointer")
	null28:
	t.56 = [t.55]
	t.56 = Lt(t.52 t.56)
	if t.56 goto :bounds21
		Error("array index out of bounds")
	bounds21:
	t.56 = MulS(t.52 4)
	t.56 = Add(t.56 t.55)
	[t.56+4] = t.54
	t.57 = 8
	t.58 = t.57
	t.59 = 19
	t.60 = t.59
	t.61 = number
	if t.61 goto :null29
		Error("null pointer")
	null29:
	t.62 = [t.61]
	t.62 = Lt(t.58 t.62)
	if t.62 goto :bounds22
		Error("array index out of bounds")
	bounds22:
	t.62 = MulS(t.58 4)
	t.62 = Add(t.62 t.61)
	[t.62+4] = t.60
	t.63 = 9
	t.64 = t.63
	t.65 = 5
	t.66 = t.65
	t.67 = number
	if t.67 goto :null30
		Error("null pointer")
	null30:
	t.68 = [t.67]
	t.68 = Lt(t.64 t.68)
	if t.68 goto :bounds23
		Error("array index out of bounds")
	bounds23:
	t.68 = MulS(t.64 4)
	t.68 = Add(t.68 t.67)
	[t.68+4] = t.66
	t.0 = 0
	t.1 = t.0
	ret t.1

func AllocArray(size)
	bytes = MulS(size 4)
	bytes = Add(bytes 4)
	v = HeapAllocZ(bytes)
	[v] = size
	ret v
