const vmt_LS
	:LS.Start
	:LS.Print
	:LS.Search
	:LS.Init

func Main [in 0, out 2, local 3]
	$t0 = HeapAllocZ(12)
	[$t0] = :vmt_LS
	if $t0 goto :null1
	Error("null pointer")
null1:
	$t1 = [$t0]
	$t1 = [$t1]
	local[0] = $t1
	local[1] = $t0
	local[2] = $t2
	$a0 = $t0
	$a1 = 10
	call $t1
	$t1 = local[0]
	$t0 = local[1]
	$t2 = local[2]
	$t2 = $v0
	PrintIntS($t2)
	ret

func LS.Start [in 2, out 2, local 14]
	local[8] = $s0
	local[10] = $s2
	local[11] = $s1
	local[12] = $s4
	local[13] = $s3
	$t0 = $a0
	$t1 = $a1
	$t2 = [$t0]
	$t2 = [$t2+12]
	local[0] = $t3
	local[1] = $t5
	local[2] = $t0
	local[3] = $t1
	local[4] = $t4
	local[5] = $t2
	local[6] = $t7
	local[7] = $t6
	local[9] = $t8
	in[0] = $a0
	in[1] = $a1
	$a0 = $t0
	$a1 = $t1
	call $t2
	$t3 = local[0]
	$t5 = local[1]
	$t0 = local[2]
	$t1 = local[3]
	$t4 = local[4]
	$t2 = local[5]
	$t7 = local[6]
	$t6 = local[7]
	$t8 = local[9]
	$a0 = in[0]
	$a1 = in[1]
	$t3 = $v0
	$t4 = [$t0]
	$t4 = [$t4+4]
	local[0] = $t3
	local[1] = $t5
	local[2] = $t0
	local[3] = $t1
	local[4] = $t4
	local[5] = $t2
	local[6] = $t7
	local[7] = $t6
	local[9] = $t8
	in[0] = $a0
	in[1] = $a1
	$a0 = $t0
	call $t4
	$t3 = local[0]
	$t5 = local[1]
	$t0 = local[2]
	$t1 = local[3]
	$t4 = local[4]
	$t2 = local[5]
	$t7 = local[6]
	$t6 = local[7]
	$t8 = local[9]
	$a0 = in[0]
	$a1 = in[1]
	$t5 = $v0
	PrintIntS(9999)
	$t6 = [$t0]
	$t6 = [$t6+8]
	local[0] = $t3
	local[1] = $t5
	local[2] = $t0
	local[3] = $t1
	local[4] = $t4
	local[5] = $t2
	local[6] = $t7
	local[7] = $t6
	local[9] = $t8
	in[0] = $a0
	in[1] = $a1
	$a0 = $t0
	$a1 = 8
	call $t6
	$t3 = local[0]
	$t5 = local[1]
	$t0 = local[2]
	$t1 = local[3]
	$t4 = local[4]
	$t2 = local[5]
	$t7 = local[6]
	$t6 = local[7]
	$t8 = local[9]
	$a0 = in[0]
	$a1 = in[1]
	$t7 = $v0
	PrintIntS($t7)
	$t8 = [$t0]
	$t8 = [$t8+8]
	local[0] = $t3
	local[1] = $t5
	local[2] = $t0
	local[3] = $t1
	local[4] = $t4
	local[5] = $t2
	local[6] = $t7
	local[7] = $t6
	local[9] = $t8
	in[0] = $a0
	in[1] = $a1
	$a0 = $t0
	$a1 = 12
	call $t8
	$t3 = local[0]
	$t5 = local[1]
	$t0 = local[2]
	$t1 = local[3]
	$t4 = local[4]
	$t2 = local[5]
	$t7 = local[6]
	$t6 = local[7]
	$t8 = local[9]
	$a0 = in[0]
	$a1 = in[1]
	$s0 = $v0
	PrintIntS($s0)
	$s1 = [$t0]
	$s1 = [$s1+8]
	local[0] = $t3
	local[1] = $t5
	local[2] = $t0
	local[3] = $t1
	local[4] = $t4
	local[5] = $t2
	local[6] = $t7
	local[7] = $t6
	local[9] = $t8
	in[0] = $a0
	in[1] = $a1
	$a0 = $t0
	$a1 = 17
	call $s1
	$t3 = local[0]
	$t5 = local[1]
	$t0 = local[2]
	$t1 = local[3]
	$t4 = local[4]
	$t2 = local[5]
	$t7 = local[6]
	$t6 = local[7]
	$t8 = local[9]
	$a0 = in[0]
	$a1 = in[1]
	$s2 = $v0
	PrintIntS($s2)
	$s3 = [$t0]
	$s3 = [$s3+8]
	local[0] = $t3
	local[1] = $t5
	local[2] = $t0
	local[3] = $t1
	local[4] = $t4
	local[5] = $t2
	local[6] = $t7
	local[7] = $t6
	local[9] = $t8
	in[0] = $a0
	in[1] = $a1
	$a0 = $t0
	$a1 = 50
	call $s3
	$t3 = local[0]
	$t5 = local[1]
	$t0 = local[2]
	$t1 = local[3]
	$t4 = local[4]
	$t2 = local[5]
	$t7 = local[6]
	$t6 = local[7]
	$t8 = local[9]
	$a0 = in[0]
	$a1 = in[1]
	$s4 = $v0
	PrintIntS($s4)
	$v0 = 55
	$s0 = local[8]
	$s2 = local[10]
	$s1 = local[11]
	$s4 = local[12]
	$s3 = local[13]
	ret

func LS.Print [in 1, out 0, local 7]
	$t0 = $a0
	$t1 = 1
while1_top:
	$t2 = [$t0+8]
	$t3 = LtS($t1 $t2)
	if0 $t3 goto :while1_end
	$t4 = [$t0+4]
	if $t4 goto :null2
	Error("null pointer")
null2:
	$t5 = [$t4]
	$t5 = Lt($t1 $t5)
	if $t5 goto :bounds1
	Error("array index out of bounds")
bounds1:
	$t5 = MulS($t1 4)
	$t5 = Add($t5 $t4)
	$t6 = [$t5+4]
	PrintIntS($t6)
	$t1 = Add($t1 1)
	goto :while1_top
while1_end:
	$v0 = 0
	ret

func LS.Search [in 2, out 0, local 15]
	local[0] = $s3
	local[2] = $s0
	local[4] = $s1
	local[12] = $s4
	local[13] = $s2
	local[14] = $s5
	$t0 = $a0
	$t1 = $a1
	$t2 = 1
	$t3 = 0
	$t4 = 0
while2_top:
	$t5 = [$t0+8]
	$t6 = LtS($t2 $t5)
	if0 $t6 goto :while2_end
	$t7 = [$t0+4]
	if $t7 goto :null3
	Error("null pointer")
null3:
	$t8 = [$t7]
	$t8 = Lt($t2 $t8)
	if $t8 goto :bounds2
	Error("array index out of bounds")
bounds2:
	$t8 = MulS($t2 4)
	$t8 = Add($t8 $t7)
	$s0 = [$t8+4]
	$s1 = Add($a1 1)
	$s2 = LtS($s0 $a1)
	if0 $s2 goto :if1_else
	$s3 = 0
	goto :if1_end
if1_else:
	$s4 = LtS($s0 $s1)
	$s5 = Sub(1 $s4)
	if0 $s5 goto :if2_else
	$s3 = 0
	goto :if2_end
if2_else:
	$t3 = 1
	$t4 = 1
	$t2 = [$t0+8]
if2_end:
if1_end:
	$t2 = Add($t2 1)
	goto :while2_top
while2_end:
	$v0 = $t4
	$s3 = local[0]
	$s0 = local[2]
	$s1 = local[4]
	$s4 = local[12]
	$s2 = local[13]
	$s5 = local[14]
	ret

func LS.Init [in 2, out 1, local 13]
	local[3] = $s0
	local[10] = $s2
	local[11] = $s1
	local[12] = $s3
	$t1 = $a0
	$t0 = $a1
	[$t1+8] = $a1
	local[0] = $t8
	local[1] = $t3
	local[2] = $t5
	local[4] = $t1
	local[5] = $t0
	local[6] = $t4
	local[7] = $t2
	local[8] = $t7
	local[9] = $t6
	in[0] = $a0
	in[1] = $a1
	$a0 = $t0
	call :AllocArray
	$t8 = local[0]
	$t3 = local[1]
	$t5 = local[2]
	$t1 = local[4]
	$t0 = local[5]
	$t4 = local[6]
	$t2 = local[7]
	$t7 = local[8]
	$t6 = local[9]
	$a0 = in[0]
	$a1 = in[1]
	$t2 = $v0
	[$t1+4] = $t2
	$t3 = 1
	$t4 = [$t1+8]
	$t5 = Add($t4 1)
while3_top:
	$t6 = [$t1+8]
	$t7 = LtS($t3 $t6)
	if0 $t7 goto :while3_end
	$t8 = MulS(2 $t3)
	$s0 = Sub($t5 3)
	$s1 = [$t1+4]
	if $s1 goto :null4
	Error("null pointer")
null4:
	$s2 = [$s1]
	$s2 = Lt($t3 $s2)
	if $s2 goto :bounds3
	Error("array index out of bounds")
bounds3:
	$s2 = MulS($t3 4)
	$s2 = Add($s2 $s1)
	$s3 = Add($t8 $s0)
	[$s2+4] = $s3
	$t3 = Add($t3 1)
	$t5 = Sub($t5 1)
	goto :while3_top
while3_end:
	$v0 = 0
	$s0 = local[3]
	$s2 = local[10]
	$s1 = local[11]
	$s3 = local[12]
	ret

func AllocArray [in 1, out 0, local 3]
	$t0 = $a0
	$t1 = MulS($a0 4)
	$t1 = Add($t1 4)
	$t2 = HeapAllocZ($t1)
	[$t2] = $a0
	$v0 = $t2
	ret

